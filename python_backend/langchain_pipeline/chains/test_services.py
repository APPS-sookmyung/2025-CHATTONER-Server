"""
Services Ìè¥Îçî Íµ¨Ï°∞ Î∞è Î™®Îìà ÌôïÏù∏ Ïä§ÌÅ¨Î¶ΩÌä∏
"""

import sys
import os
from pathlib import Path
import importlib.util

def check_services_structure():
    """Services Ìè¥Îçî Íµ¨Ï°∞ÏôÄ Î™®Îìà ÏÉÅÌÉú ÌôïÏù∏"""
    
    # ÌòÑÏû¨ ÌååÏùº Í∏∞Ï§ÄÏúºÎ°ú Í≤ΩÎ°ú ÏÑ§Ï†ï
    current_file = Path(__file__).resolve()
    python_backend = current_file.parents[2]  # python_backend Ìè¥Îçî
    services_path = python_backend / 'services'
    
    print("=" * 60)
    print("üîç SERVICES Ìè¥Îçî Íµ¨Ï°∞ ÌôïÏù∏")
    print("=" * 60)
    
    print(f"üìÇ Python Backend Path: {python_backend}")
    print(f"üìÇ Services Path: {services_path}")
    print(f"üìÇ Services Ï°¥Ïû¨ Ïó¨Î∂Ä: {services_path.exists()}")
    
    if not services_path.exists():
        print("‚ùå Services Ìè¥ÎçîÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§!")
        return
    
    # sys.pathÏóê Ï∂îÍ∞Ä
    sys.path.insert(0, str(python_backend))
    print(f"‚úÖ sys.pathÏóê Ï∂îÍ∞ÄÎê®: {python_backend}")
    
    print("\n" + "=" * 60)
    print("üìã SERVICES Ìè¥Îçî ÎÇ¥ ÌååÏùº Î™©Î°ù")
    print("=" * 60)
    
    # services Ìè¥Îçî ÎÇ¥ Î™®Îì† ÌååÏùº ÌôïÏù∏
    for item in sorted(services_path.iterdir()):
        if item.is_file():
            print(f"üìÑ {item.name}")
            if item.suffix == '.py':
                # Python ÌååÏùºÏù∏ Í≤ΩÏö∞ Í∏∞Î≥∏ Ï†ïÎ≥¥ ÌôïÏù∏
                try:
                    with open(item, 'r', encoding='utf-8') as f:
                        first_lines = f.readlines()[:10]
                        classes = [line.strip() for line in first_lines if line.strip().startswith('class ')]
                        functions = [line.strip() for line in first_lines if line.strip().startswith('def ')]
                        
                        if classes:
                            print(f"   üèóÔ∏è  ÌÅ¥ÎûòÏä§: {', '.join(classes)}")
                        if functions:
                            print(f"   ‚öôÔ∏è  Ìï®Ïàò: {', '.join(functions[:3])}{'...' if len(functions) > 3 else ''}")
                            
                except Exception as e:
                    print(f"   ‚ùå ÌååÏùº ÏùΩÍ∏∞ Ïã§Ìå®: {e}")
        elif item.is_dir():
            print(f"üìÅ {item.name}/")
    
    print("\n" + "=" * 60)
    print("üîß Î™®Îìà IMPORT ÌÖåÏä§Ìä∏")
    print("=" * 60)
    
    # Í∞Å Î™®ÎìàÎ≥Ñ import ÌÖåÏä§Ìä∏
    modules_to_test = [
        'services',
        'services.base_service',
        'services.openai_services', 
        'services.openai_service',  # Ïò§ÌÉÄ Í∞ÄÎä•ÏÑ± Ï≤¥ÌÅ¨
        'services.prompt_engineering',
        'services.conversation_service',
    ]
    
    for module_name in modules_to_test:
        try:
            module = importlib.import_module(module_name)
            print(f"‚úÖ {module_name}: ÏÑ±Í≥µ")
            
            # Î™®Îìà ÎÇ¥ Ï£ºÏöî ÌÅ¥ÎûòÏä§/Ìï®Ïàò ÌôïÏù∏
            if hasattr(module, '__all__'):
                print(f"   üìã __all__: {module.__all__}")
            else:
                # Ï£ºÏöî ÌÅ¥ÎûòÏä§Îì§ Ï∞æÍ∏∞
                attrs = [attr for attr in dir(module) 
                        if not attr.startswith('_') and attr[0].isupper()]
                if attrs:
                    print(f"   üèóÔ∏è  ÌÅ¥ÎûòÏä§Îì§: {', '.join(attrs[:5])}")
                    
        except ImportError as e:
            print(f"‚ùå {module_name}: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è  {module_name}: Í∏∞ÌÉÄ Ïò§Î•ò - {e}")
    
    print("\n" + "=" * 60)
    print("üîç ÌååÏùºÎ™Ö ÏÑ∏Î∂Ä ÌôïÏù∏")
    print("=" * 60)
    
    # ÌååÏùºÎ™Ö Ï†ïÌôïÏÑ± Ï≤¥ÌÅ¨
    expected_files = [
        '__init__.py',
        'base_service.py', 
        'openai_services.py',
        'prompt_engineering.py',
        'conversation_service.py'
    ]
    
    actual_files = [f.name for f in services_path.iterdir() if f.is_file()]
    
    for expected in expected_files:
        if expected in actual_files:
            print(f"‚úÖ {expected}: Ï°¥Ïû¨Ìï®")
        else:
            print(f"‚ùå {expected}: ÏóÜÏùå")
            # ÎπÑÏä∑Ìïú Ïù¥Î¶Ñ Ï∞æÍ∏∞
            similar = [f for f in actual_files if expected.replace('.py', '') in f.lower()]
            if similar:
                print(f"   üîç ÎπÑÏä∑Ìïú ÌååÏùº: {similar}")
    
    print(f"\nüìã Ïã§Ï†ú ÌååÏùºÎì§: {actual_files}")
    
    print("\n" + "=" * 60)
    print("üêç PYTHON PATH ÌôïÏù∏")
    print("=" * 60)
    
    print("ÌòÑÏû¨ sys.path:")
    for i, path in enumerate(sys.path[:10]):  # Ï≤òÏùå 10Í∞úÎßå
        print(f"{i+1:2d}. {path}")
    if len(sys.path) > 10:
        print(f"    ... Ï¥ù {len(sys.path)}Í∞ú Í≤ΩÎ°ú")

if __name__ == "__main__":
    check_services_structure()